---
apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: aws-eks-import
  labels:
    provider: aws
    component: aws-eks-importer
    app.kubernetes.io/name: aws-eks-importer
    app.kubernetes.io/managed-by: crossplane
spec:
  compositeTypeRef:
    apiVersion: crossplane.giantswarm.io/v1alpha1
    kind: CompositeEksImport
  writeConnectionSecretsToNamespace: crossplane
  patchSets:
    # This is a generic patchset that gets applied to all resources
    #
    # To override specific patches, make sure the overrides are applied
    # after applying the patchset to a resource
    - name: metadata
      patches:
        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: metadata.name
        - fromFieldPath: spec.namespace
          toFieldPath: metadata.namespace
        - fromFieldPath: spec.labels
          toFieldPath: metadata.labels
          policy:
            mergeOptions:
              keepMapValues: true
        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: metadata.labels[app.kubernetes.io/name]
        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: metadata.labels[app.kubernetes.io/part-of]
          transforms:
            - type: string
              string:
                fmt: "%s-eks-import"

        - fromFieldPath: spec.parameters.deletionPolicy
          toFieldPath: spec.deletionPolicy
        - fromFieldPath: spec.namespace
          toFieldPath: spec.writeConnectionSecretToRef.namespace

    # Specific patches for AWS resources directly implemented by provider-aws-*^
    - name: awsConfig
      patches:
        - fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region
        - fromFieldPath: spec.parameters.awsProviderConfigRef
          toFieldPath: spec.providerConfigRef.name

    # Patches for any resource implemented via provider-kubernetes
    - name: kubernetesConfig
      patches:
        - fromFieldPath: spec.parameters.kubernetesProviderConfigRef
          toFieldPath: spec.providerConfigRef.name

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.forProvider.manifest.metadata.name
        - fromFieldPath: spec.namespace
          toFieldPath: spec.forProvider.manifest.metadata.namespace
        - fromFieldPath: spec.kubernetesAdditionalLabels
          toFieldPath: spec.forProvider.manifest.metadata.labels
          policy:
            mergeOptions:
              keepMapValues: true
        - fromFieldPath: metadata.labels.owner
          toFieldPath: spec.forProvider.manifest.metadata.labels[application.giantswarm.io/team]
        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.forProvider.manifest.metadata.labels[cluster.x-k8s.io/cluster-name]
        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.forProvider.manifest.metadata.labels[giantswarm.io/cluster]

  resources:
    # Obtain details of the EKS cluster
    #
    # This performs a lookup to the EKS resource in AWS and retrieves information
    # about the cluster, then patches that back for use in other objects
    - name: eks-cluster
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: Cluster
        spec:
          # managementPolicy ObserveOnly sets the instance to read-only mode
          managementPolicy: ObserveOnly

      patches:
        # By patching the external-name we instruct crossplane of the
        # ID or name identifier of the remote object
        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: metadata.annotations[crossplane.io/external-name]

        # Apply AWS specific patches
        - type: PatchSet
          patchSetName: awsConfig

        # Apply common metadata
        - type: PatchSet
          patchSetName: metadata

        # The connection config secret must be unique amongst all objects in this set
        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-eks-cluster"

        # The following patches are required to take information
        # from this resource and share it amongst other resources
        # so that they can patch accordingly
        #
        # This information is shared by the `status` descriptor
        # in `definition.yaml`
        - type: ToCompositeFieldPath
          toFieldPath: status.endpoint
          fromFieldPath: status.atProvider.endpoint
          transforms:
            - type: string
              string:
                type: TrimPrefix
                trim: 'https://'
        - type: ToCompositeFieldPath
          toFieldPath: status.serviceCidrBlock
          fromFieldPath: status.atProvider.kubernetesNetworkConfig[0].serviceIpv4Cidr
        - type: ToCompositeFieldPath
          toFieldPath: status.vpcId
          fromFieldPath: status.atProvider.vpcConfig[0].vpcId
        - type: ToCompositeFieldPath
          toFieldPath: status.subnetIds
          fromFieldPath: status.atProvider.vpcConfig[0].subnetIds
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.vpcConfig[0].clusterSecurityGroupId
          toFieldPath: status.securityGroups.cluster
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.vpcConfig[0].securityGroupIds[0]
          toFieldPath: status.securityGroupIds.controlPlane
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.roleArn
          toFieldPath: status.roleName
          transforms:
            - type: string
              string:
                type: Regexp
                regexp:
                  match: '.*\/(.*)'
                  group: 1
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.identity[0].oidc[0].issuer
          toFieldPath: status.oidcIssuer
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.version
          toFieldPath: status.version

    # EKS NODEGROUP
    - name: eks-nodegroup
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: NodeGroup
        spec:
          managementPolicy: ObserveOnly
      patches:
        - fromFieldPath: spec.parameters.nodeGroupName
          toFieldPath: metadata.annotations[crossplane.io/external-name]
        - type: PatchSet
          patchSetName: awsConfig
        - type: PatchSet
          patchSetName: metadata

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-eks-cluster-ng"

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.forProvider.clusterName

        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.amiType
          toFieldPath: status.nodegroup.amiType
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.capacityType
          toFieldPath: status.nodegroup.capacityType
          transforms:
            - type: map
              map:
                ON_DEMAND: onDemand
                SPOT: spot
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.diskSize
          toFieldPath: status.nodegroup.diskSize
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.scalingConfig[0].maxSize
          toFieldPath: status.nodegroup.scaling.max
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.scalingConfig[0].minSize
          toFieldPath: status.nodegroup.scaling.min
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.subnetIds
          toFieldPath: status.nodegroup.subnets
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.instanceTypes[0]
          toFieldPath: status.nodegroup.instanceType

        # The AWSManagedControlPlane only takes the Role name and not a full ARN
        # so here we split on the last `/` character and return just that information
        # as the name of the role
        - type: ToCompositeFieldPath
          fromFieldPath: status.atProvider.nodeRoleArn
          toFieldPath: status.nodegroup.role
          transforms:
            - type: string
              string:
                type: Regexp
                regexp:
                  match: '.*\/(.*)'
                  group: 1

    # Collect information about the VPC the cluster is built in
    #
    # This is a little more dynamic as we patch from the cluster.atProvider.vpcId
    - name: eks-cluster-vpc
      base:
        apiVersion: ec2.aws.upbound.io/v1beta1
        kind: VPC
        spec:
          managementPolicy: ObserveOnly
      patches:
        - fromFieldPath: status.vpcId
          toFieldPath: metadata.annotations[crossplane.io/external-name]
        - fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.region

        - type: PatchSet
          patchSetName: awsConfig
        - type: PatchSet
          patchSetName: metadata
        - fromFieldPath: spec.parameters.clusterName

          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-eks-cluster-vpc"

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: metadata.name

        - type: ToCompositeFieldPath
          toFieldPath: status.podCidr
          fromFieldPath: status.atProvider.cidrBlock
        - fromFieldPath: spec.parameters.awsProviderConfigRef
          toFieldPath: spec.providerConfigRef.name

    # Information about authenticating to the cluster can be retrieved
    # directly into the secret identified by `writeConnectionSecretToRef`
    - name: eks-cluster-auth
      base:
        apiVersion: eks.aws.upbound.io/v1beta1
        kind: ClusterAuth
        spec:
          forProvider:
            region: eu-central-1
      patches:
        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.forProvider.clusterName
        - type: PatchSet
          patchSetName: awsConfig
        - type: PatchSet
          patchSetName: metadata

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-kubeconfig-cluster-auth"

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-eks-cluster-auth"

    # -----------------------------------------------------------------------------------------------------------------
    # KUBERNETES CLUSTER API RESOURCES
    # -----------------------------------------------------------------------------------------------------------------

    # Create the Cluster CR
    - name: clusterCr
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: cluster.x-k8s.io/v1beta1
              kind: Cluster
              metadata:
                annotations:
                  cluster.x-k8s.io/managed-by: "crossplane"
                labels: {}
              spec:
                clusterNetwork:
                  pods:
                    cidrBlocks: []
                  services:
                    cidrBlocks: []
                controlPlaneEndpoint:
                  port: 443
                controlPlaneRef:
                  apiVersion: controlplane.cluster.x-k8s.io/v1beta2
                  kind: AWSManagedControlPlane
                infrastructureRef:
                  apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
                  kind: AWSManagedCluster

              status:
                phase: "Provisioned"
                controlPlaneReady: true
                infrastructureReady: true

      patches:
        - type: PatchSet
          patchSetName: metadata
        - type: PatchSet
          patchSetName: kubernetesConfig

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-cluster"

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-cluster"

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.forProvider.manifest.spec.controlPlaneRef.name

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.forProvider.manifest.spec.infrastructureRef.name

        - fromFieldPath: status.endpoint
          toFieldPath: spec.forProvider.manifest.spec.controlPlaneEndpoint.host
        - fromFieldPath: status.serviceCidrBlock
          toFieldPath: spec.forProvider.manifest.spec.clusterNetwork.services.cidrBlocks[0]
        - fromFieldPath: status.podCidr
          toFieldPath: spec.forProvider.manifest.spec.clusterNetwork.pods.cidrBlocks[0]

    # Create the machine pool
    - name: machinepool
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: cluster.x-k8s.io/v1beta1
              kind: MachinePool
              metadata:
                annotations:
                  cluster.x-k8s.io/managed-by: "crossplane"
                labels: {}
              spec:
                clusterName: ""
                template:
                  spec:
                    bootstrap:
                      dataSecretName: ""
                    infrastructureRef:
                      apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
                      kind: AWSManagedMachinePool

      patches:
        - type: PatchSet
          patchSetName: metadata
        - type: PatchSet
          patchSetName: kubernetesConfig

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-machinepool"

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-machinepool"

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.forProvider.manifest.spec.clusterName

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.forProvider.manifest.spec.template.spec.clusterName

        - fromFieldPath: status.endpoint
          toFieldPath: spec.forProvider.manifest.spec.controlPlaneEndpoint.host
        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.forProvider.manifest.spec.template.spec.infrastructureRef.name


    # ----------------------------------------------------------------------------------------------------------------
    # Cluster API for AWS Resources
    # ----------------------------------------------------------------------------------------------------------------

    # Create the AWSClusterRoleIdentity CR
    - name: awsclusterroleidentity
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
              kind: AWSClusterRoleIdentity
              metadata:
                name: crossplane-eks
              spec:
                allowedNamespaces:
                  list: null
                  selector: {}
                sourceIdentityRef:
                  kind: AWSClusterControllerIdentity
                  name: default
          references:
            - patchesFrom:
                apiVersion: aws.upbound.io/v1beta1
                kind: ProviderConfig
                fieldPath: spec.assumeRoleChain[0].roleARN
              toFieldPath: spec.roleARN

      patches:
        - type: PatchSet
          patchSetName: metadata
        - type: PatchSet
          patchSetName: kubernetesConfig
        - fromFieldPath: spec.parameters.awsProviderConfigRef
          toFieldPath: spec.references[0].patchesFrom.name

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-awsclusterroleidentity"

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-awsclusterroleidentity"


    # Create the AWS Managed Cluster CR
    - name: awsmanagedcluster
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
              kind: AWSManagedCluster
              metadata:
                annotations:
                  cluster.x-k8s.io/managed-by: "crossplane"
                labels: {}
              spec:
                controlPlaneEndpoint:
                  host: ""
                  port: 443
              status:
                ready: true
      patches:
        - type: PatchSet
          patchSetName: metadata
        - type: PatchSet
          patchSetName: kubernetesConfig

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-awsmanagedcluster"

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-awsmanagedcluster"

        - fromFieldPath: status.endpoint
          toFieldPath: spec.forProvider.manifest.spec.controlPlaneEndpoint.host

    # Create the AWSManagedControlPlane object
    - name: awsmanagedcontrolplane
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: controlplane.cluster.x-k8s.io/v1beta2
              kind: AWSManagedControlPlane
              metadata:
                annotations:
                  cluster.x-k8s.io/managed-by: "crossplane"
                labels: {}
              spec:
                eksClusterName: ""
                controlPlaneEndpoint:
                  host: ""
                  port: 443
                network:
                  vpc: {}
                  subnets: []
                  securityGroupOverrides: {}
                identityRef:
                  kind: AWSClusterRoleIdentity
              status:
                ready: true
      patches:
        - type: PatchSet
          patchSetName: metadata
        - type: PatchSet
          patchSetName: kubernetesConfig
        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-awsmanagedcontrolplane"

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-awsmanagedcontrolplane"

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.forProvider.manifest.spec.eksClusterName
        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.forProvider.manifest.spec.identityRef.name

        - fromFieldPath: spec.parameters.region
          toFieldPath: spec.forProvider.manifest.spec.region

        - fromFieldPath: status.endpoint
          toFieldPath: spec.forProvider.manifest.spec.controlPlaneEndpoint.host

        # VPC and Subnet information
        - fromFieldPath: status.vpcId
          toFieldPath: spec.forProvider.manifest.spec.network.vpc.id

        # subnets have to be done one at a time as you cant map a string into an object
        #
        # An alternative to this may be to use composition functions however they are
        # not available on the cluster and I'm unlikely to turn them on any time soon.
        - fromFieldPath: status.subnetIds[0]
          toFieldPath: spec.forProvider.manifest.spec.network.subnets[0].id
        - fromFieldPath: status.subnetIds[1]
          toFieldPath: spec.forProvider.manifest.spec.network.subnets[1].id
        - fromFieldPath: status.subnetIds[2]
          toFieldPath: spec.forProvider.manifest.spec.network.subnets[2].id
        - fromFieldPath: status.subnetIds[3]
          toFieldPath: spec.forProvider.manifest.spec.network.subnets[3].id
        - fromFieldPath: status.subnetIds[4]
          toFieldPath: spec.forProvider.manifest.spec.network.subnets[4].id
        - fromFieldPath: status.subnetIds[5]
          toFieldPath: spec.forProvider.manifest.spec.network.subnets[5].id

        - fromFieldPath: status.securityGroups.controlPlane
          toFieldPath: spec.forProvider.manifest.spec.network.securityGroupOverrides.controlplane
        - fromFieldPath: status.securityGroups.cluster
          toFieldPath: spec.forProvider.manifest.spec.network.securityGroupOverrides.node
        - fromFieldPath: status.version
          toFieldPath: spec.forProvider.manifest.spec.version
        - fromFieldPath: status.roleName
          toFieldPath: spec.forProvider.manifest.spec.roleName

    # Create the AWSManagedMachinePool object
    #
    # This is a slightly different beast than other objects in this resource set.
    #
    # By default when trying to patch objects, if the value does not exist or is empty
    # crossplane will ignore the field until it exists, then patch the object with the
    # new value.
    #
    # This doesn't work in all instances as this results in the underlying object being
    # created with missing values, that do not later get updated even if the new value
    # exists in the fromFieldPath location.
    #
    # To overcome this, we instead use the kubernetes provider reference field and set
    # an additional dependency to the NodeGroup resource.
    #
    # This method forces the provider to wait until all required values are ready before
    # it then creates the underlying object.
    - name: awsmanagedmachinepool
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          references:
            - dependsOn:
                apiVersion: eks.aws.upbound.io/v1beta1
                kind: NodeGroup
            - patchesFrom:
                apiVersion: crossplane.giantswarm.io/v1alpha1
                kind: CompositeEksImport
                fieldPath: status.nodegroup.amiType
              toFieldPath: spec.amiType
            - patchesFrom:
                apiVersion: crossplane.giantswarm.io/v1alpha1
                kind: CompositeEksImport
                fieldPath: status.nodegroup.capacityType
              toFieldPath: spec.capacityType
            - patchesFrom:
                apiVersion: crossplane.giantswarm.io/v1alpha1
                kind: CompositeEksImport
                fieldPath: status.nodegroup.diskSize
              toFieldPath: spec.diskSize

            # scaling
            - patchesFrom:
                apiVersion: crossplane.giantswarm.io/v1alpha1
                kind: CompositeEksImport
                fieldPath: status.nodegroup.scaling.max
              toFieldPath: spec.scaling.maxSize
            - patchesFrom:
                apiVersion: crossplane.giantswarm.io/v1alpha1
                kind: CompositeEksImport
                fieldPath: status.nodegroup.scaling.min
              toFieldPath: spec.scaling.minSize

            # subnets
            - patchesFrom:
                apiVersion: crossplane.giantswarm.io/v1alpha1
                kind: CompositeEksImport
                fieldPath: status.nodegroup.subnets
              toFieldPath: spec.subnetIds
            # role
            - patchesFrom:
                apiVersion: crossplane.giantswarm.io/v1alpha1
                kind: CompositeEksImport
                fieldPath: status.nodegroup.role
              toFieldPath: spec.roleName
            # instanceType
            - patchesFrom:
                apiVersion: crossplane.giantswarm.io/v1alpha1
                kind: CompositeEksImport
                fieldPath: status.nodegroup.instanceType
              toFieldPath: spec.instanceType

          forProvider:
            manifest:
              apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
              kind: AWSManagedMachinePool
              metadata:
                annotations:
                  cluster.x-k8s.io/managed-by: "crossplane"
                labels: {}
              spec: {}
              status:
                ready: true
      patches:
        - type: PatchSet
          patchSetName: metadata
        - type: PatchSet
          patchSetName: kubernetesConfig

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-awsmanagedmachinepool"

        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-awsmanagedmachinepool"

        - fromFieldPath: spec.parameters.nodeGroupName
          toFieldPath: spec.forProvider.manifest.spec.eksNodegroupName

        # this is going to be fun :-/
        - fromFieldPath: spec.parameters.clusterName
          toFieldPath: spec.references[0].dependsOn.name

        - fromFieldPath: spec.namespace
          toFieldPath: spec.references[0].dependsOn.namespace

        - fromFieldPath: metadata.name
          toFieldPath: spec.references[1].patchesFrom.name
        - fromFieldPath: spec.namespace
          toFieldPath: spec.references[1].patchesFrom.namespace

        - fromFieldPath: metadata.name
          toFieldPath: spec.references[2].patchesFrom.name
        - fromFieldPath: spec.namespace
          toFieldPath: spec.references[2].patchesFrom.namespace

        - fromFieldPath: metadata.name
          toFieldPath: spec.references[3].patchesFrom.name
        - fromFieldPath: spec.namespace
          toFieldPath: spec.references[3].patchesFrom.namespace

        - fromFieldPath: metadata.name
          toFieldPath: spec.references[4].patchesFrom.name
        - fromFieldPath: spec.namespace
          toFieldPath: spec.references[4].patchesFrom.namespace

        - fromFieldPath: metadata.name
          toFieldPath: spec.references[5].patchesFrom.name
        - fromFieldPath: spec.namespace
          toFieldPath: spec.references[5].patchesFrom.namespace

        - fromFieldPath: metadata.name
          toFieldPath: spec.references[6].patchesFrom.name
        - fromFieldPath: spec.namespace
          toFieldPath: spec.references[6].patchesFrom.namespace

        - fromFieldPath: metadata.name
          toFieldPath: spec.references[7].patchesFrom.name
        - fromFieldPath: spec.namespace
          toFieldPath: spec.references[7].patchesFrom.namespace

        - fromFieldPath: metadata.name
          toFieldPath: spec.references[8].patchesFrom.name
        - fromFieldPath: spec.namespace
          toFieldPath: spec.references[8].namespace
